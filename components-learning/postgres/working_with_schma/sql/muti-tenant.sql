-- Step 1: Create two schemas, if they don't already exist.
-- Note: PostgreSQL creates a default schema named 'public' automatically.
CREATE SCHEMA IF NOT EXISTS swan;
CREATE SCHEMA IF NOT EXISTS passed;

-- Step 2: List all schemas in the current database except system/internal ones.
-- We exclude information_schema, pg_catalog, and pg_toast which are system schemas.
SELECT schema_name, catalog_name
FROM information_schema.schemata
WHERE schema_name NOT IN ('information_schema', 'pg_catalog', 'pg_toast');

-- After running above, you will see at least three schemas:
-- 1) public (default)
-- 2) swan (created above)
-- 3) passed (created above)

-- Step 3: Check tables in the 'swan' schema (should be empty initially).
SELECT table_name
FROM information_schema.tables
WHERE table_schema = 'swan' AND table_type = 'BASE TABLE';

-- Step 4: Create the same table structure in all three schemas (public, swan, passed).
-- The table 'Items' has:
-- - a UUID primary key that is auto-generated by default,
-- - a 'name' varchar column that is required (not null),
-- - a 'prize' integer column with default 0 and a constraint to keep it between 0 and 999999.

CREATE TABLE swan.Items (
                            item_idx uuid PRIMARY KEY DEFAULT gen_random_uuid(),
                            name varchar(100) NOT NULL,
                            prize int DEFAULT 0 CHECK (prize >= 0 AND prize <= 999999)
);

CREATE TABLE passed.Items (
                              item_idx uuid PRIMARY KEY DEFAULT gen_random_uuid(),
                              name varchar(100) NOT NULL,
                              prize int DEFAULT 0 CHECK (prize >= 0 AND prize <= 999999)
);

CREATE TABLE public.Items (
                              item_idx uuid PRIMARY KEY DEFAULT gen_random_uuid(),
                              name varchar(100) NOT NULL,
                              prize int DEFAULT 0 CHECK (prize >= 0 AND prize <= 999999)
);

-- Step 5: Insert sample data into each schemaâ€™s Items table.
-- Insert 2 items into 'swan' schema
INSERT INTO swan.Items (name, prize) VALUES
                                         ('Swan Item 1', 100),
                                         ('Swan Item 2', 200);

-- Insert 2 items into 'passed' schema
INSERT INTO passed.Items (name, prize) VALUES
                                           ('Passed Item 1', 300),
                                           ('Passed Item 2', 400);

-- Insert 1 unique item into the 'public' schema
INSERT INTO public.Items (name, prize) VALUES
    ('Public Item Unique', 500);

-- Step 6: Querying the tables.
-- When querying without specifying a schema, PostgreSQL uses the default search path,
-- which includes 'public' schema first by default.

-- Querying without schema prefix returns rows from public.Items
SELECT * FROM Items;

-- Step 7: Querying items from a specific schema can be done in two ways:

-- Method A: Temporarily change the search_path to the schema you want
-- This sets the default schema for the current session/query
SET search_path TO swan;
SELECT * FROM Items;

-- Method B: Query with explicit schema.table notation (recommended for clarity and efficiency)
SELECT * FROM swan.Items;

-- You can replace 'swan' with 'passed' or 'public' in the above queries
-- to query items from those schemas directly.
